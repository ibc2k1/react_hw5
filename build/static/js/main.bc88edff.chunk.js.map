{"version":3,"sources":["logo.svg","todoList.js","App.js","reportWebVitals.js","index.js"],"names":["List","TodoTitle","React","Component","TodoAddForm","todoRef","createRef","addItemOnList","e","preventDefault","todoItem","todo","current","value","isCompleted","props","addToDoItems","currentTarget","reset","id","onSubmit","this","type","name","ref","required","TodoList","handleChange","event","updateTodo","todoItems","console","log","updateTodos","index","toggleCheckbox","checked","className","onChange","onClick","removeToDoItem","TodoApp","state","item","items","Date","now","setState","todos","key","updatedTodo","Object","keys","map","ReactDOM","render","initItems","document","getElementById","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.bc88edff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'; \r\nimport ReactDOM from 'react-dom';\r\nimport { Component } from \"react\";\r\nimport './list.css';\r\n\r\nconst List=()=>{\r\n    class TodoTitle extends React.Component {\r\n        render () {\r\n        return <h1>CGU Todo list</h1>;\r\n        }\r\n    }\r\n\r\n    class TodoAddForm extends React.Component {\r\n        todoRef = React.createRef();\r\n    \r\n        addItemOnList = e => {\r\n        e.preventDefault();\r\n        const todoItem = {\r\n            todo: this.todoRef.current.value,\r\n            isCompleted: false\r\n        };\r\n        this.props.addToDoItems(todoItem);\r\n        e.currentTarget.reset();\r\n        };\r\n    \r\n        render() {\r\n        return (\r\n            <form id=\"todoList-form\" onSubmit={this.addItemOnList}>\r\n            <input type=\"text\" name=\"todosTxtbx\" ref={this.todoRef} required />\r\n            <button>+</button>\r\n            </form>\r\n        );\r\n        }\r\n    }\r\n\r\n    class TodoList extends React.Component {\r\n        handleChange = event => {\r\n        const updateTodo = {\r\n            ...this.props.todoItems,\r\n            [event.currentTarget.name]: event.currentTarget.value\r\n        };\r\n        console.log(event.currentTarget.value);\r\n        this.props.updateTodos(this.props.index, updateTodo);\r\n        };\r\n    \r\n        toggleCheckbox = event => {\r\n        const updateTodo = {\r\n            ...this.props.todoItems,\r\n            [event.currentTarget.name]: event.currentTarget.checked\r\n        };\r\n        this.props.updateTodos(this.props.index, updateTodo);\r\n        };\r\n    \r\n        render() {\r\n        return (\r\n            <li className={this.props.todoItems.isCompleted ? \"done\" : null}>\r\n            <input\r\n                type=\"checkbox\"\r\n                name=\"isCompleted\"\r\n                checked={this.props.todoItems.isCompleted}\r\n                onChange={this.toggleCheckbox}\r\n                // checked={this.props.todoItems.isChecked}\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"todo\"\r\n                value={this.props.todoItems.todo}\r\n                onChange={this.handleChange}\r\n            />\r\n            {/* <button>Edit</button> */}\r\n            <button\r\n                className=\"del-btn\"\r\n                onClick={() => this.props.removeToDoItem(this.props.index)}\r\n            >\r\n                x\r\n            </button>\r\n            </li>\r\n        );\r\n        }\r\n    }\r\n\r\n    var ToDoItems = [];\r\n    class TodoApp extends Component {\r\n    state = {\r\n        todoItems: {}\r\n    };\r\n\r\n    addToDoItems = item => {\r\n        const items = { ...this.state.todoItems };\r\n        console.log(items);\r\n        items[`item${Date.now()}`] = item;\r\n        this.setState({\r\n        todoItems: items\r\n        });\r\n    };\r\n\r\n    removeToDoItem = item => {\r\n        const todos = { ...this.state.todoItems };\r\n        delete todos[item];\r\n        this.setState({ todoItems: todos });\r\n    };\r\n\r\n    updateTodos = (key, updatedTodo) => {\r\n        const todos = { ...this.state.todoItems };\r\n        todos[key] = updatedTodo;\r\n        this.setState({ todoItems: todos });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"main\">\r\n            <TodoTitle/>\r\n            <TodoAddForm addToDoItems={this.addToDoItems} />\r\n            <ul>\r\n            {Object.keys(this.state.todoItems).map(key => (\r\n                <TodoList\r\n                key={key}\r\n                index={key}\r\n                todoItems={this.state.todoItems[key]}\r\n                removeToDoItem={this.removeToDoItem}\r\n                updateTodos={this.updateTodos}\r\n                />\r\n            ))}\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n    }\r\n\r\n    ReactDOM.render(<TodoApp initItems={ToDoItems}/>, document.getElementById('root'));\r\n}\r\n\r\nexport default List;","import logo from './logo.svg';\nimport './App.css';\nimport List from './todoList.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div>{ List() }</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}